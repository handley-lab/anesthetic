# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: "0 0 * * *"

  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Upgrade pip and install linters
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pydocstyle packaging
    - name: flake8 PEP compliance checks
      run: python -m flake8 anesthetic tests
    - name: pydocstyle documentation style checks
      run: python -m pydocstyle --convention=numpy anesthetic
    - name: Count missing test fixtures
      run: |
        if [ $( grep -L 'close_figures_on_teardown' $(grep -l 'matplotlib' tests/test*.py) | wc -w ) -ne 0 ]
        then
        missing_tests=$( grep -L 'close_figures_on_teardown' $(grep -l 'matplotlib' tests/test*.py) )
        echo "$missing_tests are missing the close_figures_on_teardown fixture."
        exit 1
        fi
    - name: Check version number
      run: python -m ./bin/check_version.py

  pip:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        extras: [true, false]
        include:
          - os: macos-latest
            python-version: '3.10'
            extras: true
          - os: windows-latest
            python-version: '3.10'
            extras: true

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pip-tools
        python -m piptools compile -o requirements.txt pyproject.toml
        python -m pip install -r requirements.txt

    - name: Install extra dependencies
      if: ${{ matrix.extras }} 
      run: |
        python -m piptools compile --extra extras -o requirements_extras.txt pyproject.toml
        python -m pip install -r requirements_extras.txt 

    - name: Test with pytest
      run: python -m pytest --cov=anesthetic tests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  conda:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        include:
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda config --append channels conda-forge
        conda install pytest pytest-cov pip-tools
        python -m piptools compile -o requirements.txt pyproject.toml
        conda install --file requirements.txt

    - name: Test with pytest
      shell: bash -l {0}
      run: python -m pytest --cov=anesthetic tests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
