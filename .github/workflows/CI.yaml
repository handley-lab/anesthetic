name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: "0 0 * * *"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - name: Upgrade pip and install linters
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pydocstyle packaging
      - name: flake8 PEP compliance checks
        run: python -m flake8 anesthetic tests
      - name: pydocstyle documentation style checks
        run: python -m pydocstyle --convention=numpy anesthetic
      - name: Count missing test fixtures
        run: |
          if [ $( grep -L 'close_figures_on_teardown'
          $(grep -l 'matplotlib' tests/test*.py) | wc -w ) -ne 0]
          then
          missing_tests=$( grep -L 'close_figures_on_teardown'
          $(grep -l 'matplotlib' tests/test*.py) )
          echo "$missing_tests are missing the
          close_figures_on_teardown fixture."
          exit 1
          fi

  sphinx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Upgrade pip and install doc requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[all,docs]"
      - name: build documentation
        run: |
          cd docs
          make clean
          make html SPHINXOPTS="-W --keep-going -n"

  pip:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        extras: [true, false]
        include:
          - os: macos-latest
            python-version: '3.10'
            extras: true
          - os: windows-latest
            python-version: '3.10'
            extras: true

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[test]"

      - name: Install extra dependencies
        if: ${{ matrix.extras }}
        run: |
          python -m pip install -e ".[all]"

      - name: Test with pytest
        run: python -m pytest --cov=anesthetic tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  conda:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        include:
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda config --append channels conda-forge
          conda install pytest pytest-cov
          conda install scipy numpy 'matplotlib>=3.6.1' 'pandas>=2.0.0'

      - name: Test with pytest
        shell: bash -l {0}
        run: python -m pytest --cov=anesthetic tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  test-build-n-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install pypa/build
        run: python -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: true
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  minimum-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tomli
          python -m pip install $(./bin/min_dependencies.py)
          python -m pip install -e ".[test]"

      - name: Test with pytest
        run: python -m pytest --cov=anesthetic tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
